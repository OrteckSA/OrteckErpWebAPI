using DAL.Services;
using ERP.Domain.Entity;
using ERP.Domain.UnitOfWork;
using ERP.Domain.Utils;
using ERP.WebAPI.Extensions;
using ERP.WebAPI.Filters;
using ERP.WebAPI.Services.Common;
using Hangfire;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.DataProtection;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

builder.Logging.AddConsole();


// Add services to the container.
builder.Services.AddControllers();

builder.Services.SetServices(builder.Configuration);
builder.Services.AddDataProtection()
        .PersistKeysToFileSystem(new DirectoryInfo(@"UNC-PATH"));

// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();

#region Configure Swagger with JWT authentication support
builder.Services.AddSwaggerGen(options =>
{
    options.SwaggerDoc("v1", new OpenApiInfo { Title = "OrteckErpWebAPI", Version = "v1" });

    // Add JWT authentication settings to Swagger
    options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = SecuritySchemeType.ApiKey,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = ParameterLocation.Header,
        Description = "Enter 'Bearer' followed by your token in the field below.\r\nExample: \"Bearer 12345abcdef\"",
    });

    // Apply the JWT authentication to all API endpoints
    options.AddSecurityRequirement(new OpenApiSecurityRequirement
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type = ReferenceType.SecurityScheme,
                                Id = "Bearer"
                            }
                        },
                        new string[] {} // No specific scopes required
                    }
                });

    // Locate the XML file being generated by ASP.NET Core and add it to Swagger
    var xmlFile = $"{System.Reflection.Assembly.GetExecutingAssembly().GetName().Name}.xml";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
    options.IncludeXmlComments(xmlPath);
});
#endregion

#region Configure JWT authentication
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
}).AddJwtBearer(options =>
{
    options.SaveToken = true;
    options.RequireHttpsMetadata = false;
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidIssuer = builder.Configuration["Jwt:validIssuer"],
        ValidateAudience = true,
        ValidAudience = builder.Configuration["Jwt:validAudience"],
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:securityKey"]))
    };
});
#endregion

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(options =>
    {
        options.SwaggerEndpoint("/swagger/v1/swagger.json", "ERP WebAPI V1");
        options.RoutePrefix = string.Empty; // To access Swagger at the root URL
    });
}

app.UseStaticFiles();

//app.UseRouting();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

bool dbOk;
using (var scope = app.Services.CreateScope())
{
    dbOk = scope.ServiceProvider.GetService<CheckDatabaseService>().CheckDatabaseVersion();
    //if(!dbOk)
        //throw new Exception("Database version is not supported");
}

//app.UseHangfireDashboard("/hangfire", new DashboardOptions
//{
//    Authorization = new[] { new HangfireAuthorizationFilter() }
//});

//using (var scope = app.Services.CreateScope())
//{
//    var erpUserService = scope.ServiceProvider.GetService<IIntegrationErpUserService>();
//    await erpUserService.LoginToIntegrationUser();
//}
try
{
    app.Run();
}
catch (Exception ex)
{
    var fileLogger = new NReco.Logging.File.FileLogger("UnHandledExceptions",new NReco.Logging.File.FileLoggerProvider("UnHandledExceptions.log", true));
    fileLogger.LogError(ex,ex.Message);
}